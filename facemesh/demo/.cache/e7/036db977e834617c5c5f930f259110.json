{"id":"node_modules/python-bridge/index.js","dependencies":[{"name":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\package.json","includedInParent":true,"mtime":1597990504045},{"name":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\.babelrc","includedInParent":true,"mtime":1597771241546},{"name":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\node_modules\\python-bridge\\package.json","includedInParent":true,"mtime":1597990497732},{"name":"bluebird","loc":{"line":3,"column":22},"parent":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\node_modules\\python-bridge\\index.js","resolved":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\node_modules\\bluebird\\js\\browser\\bluebird.js"},{"name":"path","loc":{"line":4,"column":19},"parent":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\node_modules\\python-bridge\\index.js","resolved":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\node_modules\\path-browserify\\index.js"},{"name":"child_process","loc":{"line":5,"column":49},"parent":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\node_modules\\python-bridge\\index.js","resolved":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"process","parent":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\node_modules\\python-bridge\\index.js","resolved":"C:\\Users\\zhouc\\vscode-workspace\\eyelang\\facemesh\\demo\\node_modules\\process\\browser.js"}],"generated":{"js":"var __dirname = \"C:\\\\Users\\\\zhouc\\\\vscode-workspace\\\\eyelang\\\\facemesh\\\\demo\\\\node_modules\\\\python-bridge\";\nvar process = require(\"process\");\n'use strict';\n\nlet Promise = require('bluebird');\nlet path = require('path');\nlet child_process = Promise.promisifyAll(require('child_process'));\n\nconst PYTHON_BRIDGE_SCRIPT = path.join(__dirname, 'node_python_bridge.py');\n\nfunction pythonBridge(opts) {\n    // default options\n    let intepreter = opts && opts.python || 'python';\n    let stdio = opts && opts.stdio || ['pipe', process.stdout, process.stderr];\n    let options = {\n        cwd: opts && opts.cwd,\n        env: opts && opts.env,\n        uid: opts && opts.uid,\n        gid: opts && opts.gid,\n        stdio: stdio.concat(['ipc'])\n    };\n\n    // create process bridge\n    let ps = child_process.spawn(intepreter, [PYTHON_BRIDGE_SCRIPT], options);\n    let queue = singleQueue();\n\n    function sendPythonCommand(type, enqueue, self) {\n        function wrapper() {\n            self = self || wrapper;\n            let code = json.apply(this, arguments);\n\n            if (!(this && this.connected || self.connected)) {\n                return Promise.reject(new PythonBridgeNotConnected());\n            }\n\n            return enqueue(() => new Promise((resolve, reject) => {\n                ps.send({type: type, code: code});\n                ps.once('message', onMessage);\n                ps.once('close', onClose);\n\n                function onMessage(data) {\n                    ps.removeListener('close', onClose);\n                    if (data && data.type && data.type === 'success') {\n                        resolve(eval(`(${data.value})`));\n                    } else if (data && data.type && data.type === 'exception') {\n                        reject(new PythonException(data.value));\n                    } else {\n                        reject(data);\n                    }\n                }\n\n                function onClose(exit_code, message) {\n                    ps.removeListener('message', onMessage);\n                    if (!message) {\n                        reject(new Error(`Python process closed with exit code ${exit_code}`));\n                    } else {\n                        reject(new Error(`Python process closed with exit code ${exit_code} and message: ${message}`));\n                    }\n                }\n            }));\n        }\n        return wrapper;\n    }\n\n    function setupLock(enqueue) {\n        return f => {\n            return enqueue(() => {\n                let lock_queue = singleQueue();\n                let lock_python = sendPythonCommand('evaluate', lock_queue);\n                lock_python.ex = sendPythonCommand('execute', lock_queue, lock_python);\n                lock_python.lock = setupLock(lock_queue);\n                lock_python.connected = true;\n                lock_python.__proto__ = python;\n\n                return f(lock_python);\n            });\n        };\n    }\n\n    // API\n    let python = sendPythonCommand('evaluate', queue);\n    python.ex = sendPythonCommand('execute', queue, python);\n    python.lock = setupLock(queue);\n    python.pid = ps.pid;\n    python.connected = true;\n    python.Exception = PythonException;\n    python.isException = isPythonException;\n    python.disconnect = () => {\n        python.connected = false;\n        return queue(() => {\n            ps.disconnect();\n        });\n    };\n    python.end = python.disconnect;\n    python.kill = signal => {\n        python.connected = false;\n        ps.kill(signal);\n    };\n    python.stdin = ps.stdin;\n    python.stdout = ps.stdout;\n    python.stderr = ps.stderr;\n    return python;\n}\n\nclass PythonException extends Error {\n    constructor(exc) {\n        if (exc && exc.format) {\n            super(exc.format.join(''));\n        } else if (exc && exc.error) {\n            super(`Python exception: ${exc.error}`);\n        } else {\n            super('Unknown Python exception');\n        }\n        this.error = exc.error;\n        this.exception = exc.exception;\n        this.traceback = exc.traceback;\n        this.format = exc.format;\n    }\n}\n\nclass PythonBridgeNotConnected extends Error {\n    constructor() {\n        super('Python bridge is no longer connected.');\n    }\n}\n\nfunction isPythonException(name, exc) {\n    const thunk = exc => (\n        exc instanceof PythonException &&\n        exc.exception &&\n        exc.exception.type.name === name\n    );\n    if (exc === undefined) {\n        return thunk;\n    }\n    return thunk(exc);\n}\n\nfunction singleQueue() {\n    let last = Promise.resolve();\n    return function enqueue(f) {\n        let wait = last;\n        let done;\n        last = new Promise(resolve => {\n            done = resolve;\n        });\n        return new Promise((resolve, reject) => {\n            wait.finally(() => {\n                Promise.try(f).then(resolve, reject);\n            });\n        }).finally(() => done());\n    };\n}\n\nfunction dedent(code) {\n    // dedent text\n    let lines = code.split('\\n');\n    let offset = null;\n\n    // remove extra blank starting line\n    if (!lines[0].trim()) {\n        lines.shift();\n    }\n    for (let line of lines) {\n        let trimmed = line.trimLeft();\n        if (trimmed) {\n            offset = (line.length - trimmed.length) + 1;\n            break;\n        }\n    }\n    if (!offset) {\n        return code;\n    }\n    let match = new RegExp('^' + new Array(offset).join('\\\\s?'));\n    return lines.map(line => line.replace(match, '')).join('\\n');\n}\n\nfunction json(text_nodes) {\n    let values = Array.prototype.slice.call(arguments, 1);\n    return dedent(text_nodes.reduce((cur, acc, i) => {\n        return cur + serializePython(values[i - 1]) + acc;\n    }));\n}\n\nfunction serializePython(value) {\n    if (value === null || typeof value === 'undefined') {\n        return 'None';\n    } else if (value === true) {\n        return 'True';\n    } else if (value === false) {\n        return 'False';\n    } else if (value === Infinity) {\n        return \"float('inf')\";\n    } else if (value === -Infinity) {\n        return \"float('-inf')\";\n    } else if (value instanceof Array) {\n        return `[${value.map(serializePython).join(', ')}]`;\n    } else if (typeof value === 'number') {\n        if (isNaN(value)) {\n            return \"float('nan')\";\n        }\n        return JSON.stringify(value);\n    } else if (typeof value === 'string') {\n        return JSON.stringify(value);\n    } else if (value instanceof Map) {\n        const props = Array.from(value.entries()).map(kv => `${serializePython(kv[0])}: ${serializePython(kv[1])}`);\n        return `{${props.join(', ')}}`;\n    } else {\n        const props = Object.keys(value).map(k => `${serializePython(k)}: ${serializePython(value[k])}`);\n        return `{${props.join(', ')}}`;\n    }\n}\n\npythonBridge.pythonBridge = pythonBridge;\npythonBridge.PythonException = PythonException;\npythonBridge.PythonBridgeNotConnected = PythonBridgeNotConnected;\npythonBridge.isPythonException = isPythonException;\npythonBridge.json = json;\npythonBridge.serializePython = serializePython;\n\nmodule.exports = pythonBridge.pythonBridge = pythonBridge;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/python-bridge/index.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":206,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":208,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":209,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":210,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":211,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":212,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":213,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":214,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":215,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":216,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":217,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":218,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":219,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/python-bridge/index.js","original":{"line":220,"column":0},"generated":{"line":222,"column":0}}],"sources":{"node_modules/python-bridge/index.js":"'use strict';\n\nlet Promise = require('bluebird');\nlet path = require('path');\nlet child_process = Promise.promisifyAll(require('child_process'));\n\nconst PYTHON_BRIDGE_SCRIPT = path.join(__dirname, 'node_python_bridge.py');\n\nfunction pythonBridge(opts) {\n    // default options\n    let intepreter = opts && opts.python || 'python';\n    let stdio = opts && opts.stdio || ['pipe', process.stdout, process.stderr];\n    let options = {\n        cwd: opts && opts.cwd,\n        env: opts && opts.env,\n        uid: opts && opts.uid,\n        gid: opts && opts.gid,\n        stdio: stdio.concat(['ipc'])\n    };\n\n    // create process bridge\n    let ps = child_process.spawn(intepreter, [PYTHON_BRIDGE_SCRIPT], options);\n    let queue = singleQueue();\n\n    function sendPythonCommand(type, enqueue, self) {\n        function wrapper() {\n            self = self || wrapper;\n            let code = json.apply(this, arguments);\n\n            if (!(this && this.connected || self.connected)) {\n                return Promise.reject(new PythonBridgeNotConnected());\n            }\n\n            return enqueue(() => new Promise((resolve, reject) => {\n                ps.send({type: type, code: code});\n                ps.once('message', onMessage);\n                ps.once('close', onClose);\n\n                function onMessage(data) {\n                    ps.removeListener('close', onClose);\n                    if (data && data.type && data.type === 'success') {\n                        resolve(eval(`(${data.value})`));\n                    } else if (data && data.type && data.type === 'exception') {\n                        reject(new PythonException(data.value));\n                    } else {\n                        reject(data);\n                    }\n                }\n\n                function onClose(exit_code, message) {\n                    ps.removeListener('message', onMessage);\n                    if (!message) {\n                        reject(new Error(`Python process closed with exit code ${exit_code}`));\n                    } else {\n                        reject(new Error(`Python process closed with exit code ${exit_code} and message: ${message}`));\n                    }\n                }\n            }));\n        }\n        return wrapper;\n    }\n\n    function setupLock(enqueue) {\n        return f => {\n            return enqueue(() => {\n                let lock_queue = singleQueue();\n                let lock_python = sendPythonCommand('evaluate', lock_queue);\n                lock_python.ex = sendPythonCommand('execute', lock_queue, lock_python);\n                lock_python.lock = setupLock(lock_queue);\n                lock_python.connected = true;\n                lock_python.__proto__ = python;\n\n                return f(lock_python);\n            });\n        };\n    }\n\n    // API\n    let python = sendPythonCommand('evaluate', queue);\n    python.ex = sendPythonCommand('execute', queue, python);\n    python.lock = setupLock(queue);\n    python.pid = ps.pid;\n    python.connected = true;\n    python.Exception = PythonException;\n    python.isException = isPythonException;\n    python.disconnect = () => {\n        python.connected = false;\n        return queue(() => {\n            ps.disconnect();\n        });\n    };\n    python.end = python.disconnect;\n    python.kill = signal => {\n        python.connected = false;\n        ps.kill(signal);\n    };\n    python.stdin = ps.stdin;\n    python.stdout = ps.stdout;\n    python.stderr = ps.stderr;\n    return python;\n}\n\nclass PythonException extends Error {\n    constructor(exc) {\n        if (exc && exc.format) {\n            super(exc.format.join(''));\n        } else if (exc && exc.error) {\n            super(`Python exception: ${exc.error}`);\n        } else {\n            super('Unknown Python exception');\n        }\n        this.error = exc.error;\n        this.exception = exc.exception;\n        this.traceback = exc.traceback;\n        this.format = exc.format;\n    }\n}\n\nclass PythonBridgeNotConnected extends Error {\n    constructor() {\n        super('Python bridge is no longer connected.');\n    }\n}\n\nfunction isPythonException(name, exc) {\n    const thunk = exc => (\n        exc instanceof PythonException &&\n        exc.exception &&\n        exc.exception.type.name === name\n    );\n    if (exc === undefined) {\n        return thunk;\n    }\n    return thunk(exc);\n}\n\nfunction singleQueue() {\n    let last = Promise.resolve();\n    return function enqueue(f) {\n        let wait = last;\n        let done;\n        last = new Promise(resolve => {\n            done = resolve;\n        });\n        return new Promise((resolve, reject) => {\n            wait.finally(() => {\n                Promise.try(f).then(resolve, reject);\n            });\n        }).finally(() => done());\n    };\n}\n\nfunction dedent(code) {\n    // dedent text\n    let lines = code.split('\\n');\n    let offset = null;\n\n    // remove extra blank starting line\n    if (!lines[0].trim()) {\n        lines.shift();\n    }\n    for (let line of lines) {\n        let trimmed = line.trimLeft();\n        if (trimmed) {\n            offset = (line.length - trimmed.length) + 1;\n            break;\n        }\n    }\n    if (!offset) {\n        return code;\n    }\n    let match = new RegExp('^' + new Array(offset).join('\\\\s?'));\n    return lines.map(line => line.replace(match, '')).join('\\n');\n}\n\nfunction json(text_nodes) {\n    let values = Array.prototype.slice.call(arguments, 1);\n    return dedent(text_nodes.reduce((cur, acc, i) => {\n        return cur + serializePython(values[i - 1]) + acc;\n    }));\n}\n\nfunction serializePython(value) {\n    if (value === null || typeof value === 'undefined') {\n        return 'None';\n    } else if (value === true) {\n        return 'True';\n    } else if (value === false) {\n        return 'False';\n    } else if (value === Infinity) {\n        return \"float('inf')\";\n    } else if (value === -Infinity) {\n        return \"float('-inf')\";\n    } else if (value instanceof Array) {\n        return `[${value.map(serializePython).join(', ')}]`;\n    } else if (typeof value === 'number') {\n        if (isNaN(value)) {\n            return \"float('nan')\";\n        }\n        return JSON.stringify(value);\n    } else if (typeof value === 'string') {\n        return JSON.stringify(value);\n    } else if (value instanceof Map) {\n        const props = Array.from(value.entries()).map(kv => `${serializePython(kv[0])}: ${serializePython(kv[1])}`);\n        return `{${props.join(', ')}}`;\n    } else {\n        const props = Object.keys(value).map(k => `${serializePython(k)}: ${serializePython(value[k])}`);\n        return `{${props.join(', ')}}`;\n    }\n}\n\npythonBridge.pythonBridge = pythonBridge;\npythonBridge.PythonException = PythonException;\npythonBridge.PythonBridgeNotConnected = PythonBridgeNotConnected;\npythonBridge.isPythonException = isPythonException;\npythonBridge.json = json;\npythonBridge.serializePython = serializePython;\n\nmodule.exports = pythonBridge.pythonBridge = pythonBridge;\n"},"lineCount":222}},"error":null,"hash":"6847c0c61bafbe3fcd8d32d445b226ff","cacheData":{"env":{}}}